#pragma once

#include <cstdlib>

#include <string>
#include <vector>

#include "SupercellCompression/common/Endian.h"
#include "SupercellCompression//Signature.h"

namespace sc
{
	// Small helper functions
	class Utils
	{
	public:
		static bool fileExist(const std::string& path);
		static std::string fileBaseName(const std::string& filepath);

		static uint32_t fileSize(FILE* file);

		static bool endsWith(const std::string& value, const std::string& ending);
	};

	// Structures

	// Data in .sc file header
	struct CompressedSwfProps
	{
		// Most likely randomly generated bytes. Must not contain zeros.
		// I think ID is a more appropriate name for this.
		// It may look like a sign, but it's definitely not it, at least because any data from the file does not fit it.
		// And also confirmation of this guess can be the fact that the length of this alleged sign can be any, I think, for example, if there are a lot of files and it is difficult to generate a unique ID.
		std::vector<uint8_t> id;

		// Metadata from version 4
		std::vector<uint8_t> metadata;

		// Hash from SIG
		std::vector<uint8_t> sign;

		// Compress signature
		CompressionSignature signature = CompressionSignature::NONE;
	};

	// Error enums

	// Errors for Decompressor
	enum class CompressorError
	{
		OK = 0,

		FILE_READ_ERROR,
		FILE_WRITE_ERROR,
		WRONG_FILE_ERROR,

		DECOMPRESS_ERROR,
		COMPRESS_ERROR,
	};

	// Error for LZMA, LZHAM, ZSTD compression methods
	enum class CompressionError
	{
		OK = 0,

		INIT_ERROR = 10,
		DATA_ERROR,
		ALLOC_ERROR,
	};
}